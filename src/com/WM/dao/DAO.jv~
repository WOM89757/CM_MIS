//Source file: C:\\Users\\茂\\Desktop\\课设\\管理信息系统\\cl\\代码\\com\\WM\\dao\\DAO.java

package com.WM.dao;


import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.swing.JOptionPane;

import com.WM.dao.Model.Item;
import com.WM.dao.Model.bill;
import com.WM.dao.Model.billDetail;
import com.WM.dao.Model.goods;
import com.WM.dao.Model.kucun;
import com.WM.dao.Model.serviceItems;

public class DAO 

{

	protected static String dbClassName = "com.microsoft.sqlserver.jdbc.SQLServerDriver";// SQL数据库驱动类的名称
	protected static String dbUrl = "jdbc:sqlserver://localhost:1433;";// 访问SQL数据库的路径
	protected static String dbUser = "ck";// 访问SQL数据库的用户名
	protected static String dbPwd = "a123456";// 访问SQL数据库的密码
	protected static String dbName = "db_database28";// 访问SQL数据库中的实例(db_database27)
	protected static String second = null;//
	public static Connection conn = null;// SQL数据库的连接对象

	

	
	static {// 静态初始化Dao类
		try {
			if (conn == null) {
				
				Class.forName(dbClassName);// 实例化MySQL数据库的驱动
				
				conn = DriverManager.getConnection(dbUrl,dbUser,dbPwd);// 连接MySQL数据库
				//System.out.println("数据库加载成功!");
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(null, "请将SQL的JDBC驱动包复制到lib文件夹中。");// 捕获异常后，弹出提示框
			System.exit(-1);// 系统停止运行
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
   
   /**
    * @roseuid 5D04BD2202EE
    */
   public DAO() 
   {
    
   }
	// 执行指定查询
	public static ResultSet query(String QueryStr) {
		ResultSet set = findForResultSet(QueryStr);
		return set;
	}
	public static List findForList(String sql) {
		List<List> list = new ArrayList<List>();
		ResultSet rs = findForResultSet(sql);
		try {
			ResultSetMetaData metaData = rs.getMetaData();
			int colCount = metaData.getColumnCount();
			while (rs.next()) {
				List<String> row = new ArrayList<String>();
				for (int i = 1; i <= colCount; i++) {
					String str = rs.getString(i);
					if (str != null && !str.isEmpty())
						str = str.trim();
					row.add(str);
				}
				list.add(row);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
	// 添加数据
	public static boolean insert(String sql) {
		boolean result = false;
		try {
			//System.out.println(sql);
			Statement stmt = conn.createStatement();
			result = stmt.execute(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	// 在事务中添加销售信息
	public static boolean insertSellInfo(bill sellMain) {
		try {
			boolean autoCommit = conn.getAutoCommit();
			conn.setAutoCommit(false);
			// 添加销售主表记录
			insert("insert into bill values('" + sellMain.getSellId()
					+ "','" + sellMain.getJe()
					+ "','" + sellMain.getXsdate()
					+ "','" +sellMain.getKhname()+ "');");
			Set<billDetail> rkDetails = sellMain.getbillDetails();
			for (Iterator<billDetail> iter = rkDetails.iterator(); iter
					.hasNext();) {
				billDetail details = iter.next();
				// 添加销售详细表记录
				insert("insert into bilDetails values('"
						+ sellMain.getSellId() + "','" + details.getSpid()
						+ "'," + details.getDj() + "," + details.getSl() + ");");
			
				// 修改库存表记录
				Item item = new Item();
				item.setId(details.getSpid());
				goods spInfo = getgoods(item);
				if(spInfo!=null) {
					
					if (spInfo.getId() != null && !spInfo.getId().isEmpty()) {
						
						
							int sl = Integer.valueOf(spInfo.getStock()) - details.getSl();
							//System.out.println(sl);
							update("update goods set Stock=" + sl + " where goodsId='"
									+ spInfo.getId() + "';");
						
					}
				}
			}
			conn.commit();
			conn.setAutoCommit(autoCommit);
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}
	// 更新数据
	public static int update(String sql) {
		int result = 0;
		try {
			Statement stmt = conn.createStatement();
			result = stmt.executeUpdate(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	// 读取商品信息
	public static goods getgoods(Item item) {
		String where =null;
		
		if (item.getName() != null)
			where = "goodsName='" + item.getName() + "'";
		if (item.getId() != null)
			where = "goodsId='" + item.getId() + "'";

		if(where!=null) {
		ResultSet rs = findForResultSet("select * from goods where "
				+ where);
		goods spInfo = new goods();
		try {
			if (rs.next()) {
				spInfo.setId(rs.getString("goodsId").trim());
				spInfo.setClassic(rs.getString("goodsClassic").trim());
				spInfo.setName(rs.getString("goodsName").trim());
				spInfo.setStock(rs.getString("Stock").trim());
				spInfo.setSafeStock(rs.getString("safeStock").trim());
				spInfo.setSellingPrice(rs.getString("sellingprice").trim());

			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return spInfo;
		}
		return null;
	}
	// 读取服务项目信息
	public static serviceItems  getserviceItems (Item item) {
		String where =null;
		
		if (item.getName() != null)
			where = "serviceName='" + item.getName() + "'";
		if (item.getId() != null)
			where = "serviceitemId='" + item.getId() + "'";

		if(where!=null) {
		ResultSet rs = findForResultSet("select * from serviceItems where "
				+ where);
		serviceItems spInfo = new serviceItems();
		try {
			if (rs.next()) {
				spInfo.setid(rs.getString("serviceitemId").trim());
				spInfo.setServiceItemcs(rs.getString("serviceitemClassic").trim());
				spInfo.setServiceName(rs.getString("serviceName").trim());
				spInfo.setSellingPrice(rs.getDouble("sellingprice"));

			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return spInfo;
		}
		return null;
	}


	
	// 获取库存商品信息
	public static kucun getKucun(Item item) {
		String where = "spname='" + item.getName() + "'";
		if (item.getId() != null)
			where = "id='" + item.getId() + "'";
		ResultSet rs = findForResultSet("select * from tb_kucun where " + where);
		kucun kucun = new kucun();
		try {
			if (rs.next()) {
				kucun.setId(rs.getString("id"));
				kucun.setName(rs.getString("name"));
			/*	kucun.setJc(rs.getString("jc"));
				kucun.setBz(rs.getString("bz"));
				kucun.setCd(rs.getString("cd"));
				kucun.setDj(rs.getDouble("dj"));
				kucun.setDw(rs.getString("dw"));
				kucun.setGg(rs.getString("gg"));
				kucun.setKcsl(rs.getInt("kcsl"));*/
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return kucun;
	}

	
	// 读取所有客户信息
	public static List getKhInfos() {
		List list = findForList("select cardId,userName from customer");
		return list;
	}
	
	// 获取销售主表最大ID
	public static String getSellMainMaxId(Date date) {
		return getMainTypeTableMaxId(date, "bill", "SY", "billId");
	}
	// 获取更类主表最大ID
	private static String getMainTypeTableMaxId(Date date, String table,
			String idChar, String idName) {
		String dateStr = date.toString().replace("-", "");
		String id = idChar + dateStr;
		String sql = "select max(" + idName + ") from " + table + " where "
				+ idName + " like '" + id + "%'";
		ResultSet set = query(sql);
		String baseId = null;
		try {
			if (set.next())
				baseId = set.getString(1);
		} catch (SQLException e) {
			e.printStackTrace();
		}


		baseId = baseId == null ? "000" : baseId.substring(baseId.length()-15);
		baseId=baseId.trim();
		int idNum = Integer.valueOf(baseId)+1;
		//System.out.println(idNum);
		id += String.format("%03d", idNum);
		//System.out.println(id);
		return id;
	}
	// 验证登录
	public static boolean checkLogin(String userStr, String passStr)
			throws SQLException {
		ResultSet rs = findForResultSet("select * from staff where staffName='"
				+ userStr + "' and password='" + passStr + "'");
		if (rs == null)
			return false;
		return rs.next();
	}
	public static ResultSet findForResultSet(String sql) {
		if (conn == null)
			return null;
		long time = System.currentTimeMillis();
		ResultSet rs = null;
	//	System.out.println(sql);
		try {
			Statement stmt = null;
			stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			rs = stmt.executeQuery(sql);
			second = ((System.currentTimeMillis() - time) / 1000d) + "";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return rs;
	}
}
